#Autor: Lorena Suset Romero Torres
#Fecha:04/07/2025
#Proyecto:Dashcam(TFG)

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

!pip install ultralytics

from ultralytics import YOLO
from PIL import Image
import cv2
import yaml

#CARGAR DRIVE PARA PODER ACCEDER A LOS FICHEROS DE IMAGENES Y ETIQUETAS
from google.colab import drive
drive.mount('/content/gdrive')

#COMPROBAMOS QUE EL PROCESO SE HIZO CORRECTAMENTE PARA IMAGENES

destino1 = 'ruta/train/'
destino2 = 'ruta/val/'
destino3 = 'ruta/test/'

content_train = os.listdir(destino1)
content_val = os.listdir(destino2)
content_test = os.listdir(destino3)

print(len(content_train), 'train')
print(len(content_val), 'val')
print(len(content_test), 'test')

#COMPROBAMOS TAMBIE PARA ETIQUETAS
destino1 = 'ruta/train/'
destino2 = 'ruta/val/'
destino3 = 'ruta/test/'

fichero1 = os.listdir(destino1)
fichero2 = os.listdir(destino2)
fichero3 = os.listdir(destino3)


print(len(fichero1), 'train')
print(len(fichero2), 'val')
print(len(fichero3), 'test')

os.makedirs('/content/data/', exist_ok=True)

#CREAMOS ARCHIVO .YAML INDICANDO LAS CLASES A DETECTAR (veh√≠culo y persona)
path_train = 'ruta/train/'
path_test  = 'ruta/test/'
path_val   = 'ruta/val/'

nro_clases = 1

nombre = ['license_plate']

f = open('/content/data/data.yaml', 'w+')
f.write('train: ' + path_train + '\n')
f.write('test:  ' + path_test  + '\n')
f.write('val:   ' + path_val   + '\n')

f.write('nc: ' + str(nro_clases) + '\n')
f.write('names: ' + str(nombre)  + '\n')

f.close()

#COMPROBAMOS LA CREACION DEL FICHERO
!cat /content/data/data.yaml

train = "ruta/train"
val = "ruta/val"
test = "ruta/test"

classes = ['license_plate']

data_yaml_content = f"""
train: {train}
val: {val}
test: {test}

nc: {len(classes)}
names: {classes}
"""

yaml_path = "/content/data/data.yaml"

with open(yaml_path, "w") as f:
    f.write(data_yaml_content)

!cat {yaml_path}

yolo_8 = YOLO("yolov8n.pt")

results_8 = yolo_8.train(
    data = yaml_path,
    epochs=50,
    imgsz=640,
    lr0= 0.0005,
    batch=32,
    lrf=0.1,
    augment=True,
    device="cuda",
)

results = yolo_8.val()

map50 = results.box.map50  # mAP@50
map50_95 = results.box.map  # mAP@50-95 (averaged)
precision = results.box.mp  # Mean Precision
recall = results.box.mr  # Mean Recall
f1_score = results.box.f1  # F1 Score

import glob
import random
import os

all_images = glob.glob("ruta/val/*.jpg")
test_images = random.sample(all_images, 6)


fig, axes = plt.subplots(2, 3, figsize=(15, 10))

for img_path, ax in zip(test_images, axes.flatten()):
    results = yolo_8(img_path)
    result_img = results[0].plot()


    img_rgb = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)
    ax.imshow(img_rgb)
    ax.axis("off")
    ax.set_title(os.path.basename(img_path))
plt.tight_layout()
plt.show()

img_path = 'ruta/xxx.jpg'

results = yolo_8(img_path)
result_img = results[0].plot()

img_rgb = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(6,6))
plt.imshow(img_rgb)
plt.axis("off")
plt.title(os.path.basename(img_path))
plt.show()

!pip install pytesseract
import pytesseract

image = cv2.imread(img_path)

#OCR
for result in results:
    for box in result.boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0]) #Bounding Box Coordinates
        cropped = image[y1:y2, x1:x2]

        gray = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)
        text = pytesseract.image_to_string(gray, config="--psm 6") #OCR

        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, text.strip(), (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

print(text)
plt.figure(figsize=(10, 6))
plt.imshow(image_rgb)
plt.axis("off")
plt.title("OCR Results")
plt.show()

yolo_8.save("/content/procesar_matriculas.pt")
