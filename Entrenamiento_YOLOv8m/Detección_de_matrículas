# Autor: Lorena Suset Romero Torres
# Fecha: 04/07/2025
# Proyecto: Dashcam (TFG)

# -----------------------------------------------
# Librerías
import os
import glob
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import cv2
import warnings
from PIL import Image
import pytesseract
from ultralytics import YOLO
from google.colab import drive

warnings.filterwarnings('ignore')

# -----------------------------------------------
# Instalaciones necesarias
!pip install ultralytics
!pip install pytesseract

# -----------------------------------------------
# Constantes globales
RUTA_TRAIN = 'ruta/train/'
RUTA_VAL = 'ruta/val/'
RUTA_TEST = 'ruta/test/'
CLASES = ['license_plate']
YAML_PATH = "/content/data/data.yaml"
MODELO_YOLO = "yolov8n.pt"
IMG_PREDICCION = 'ruta/xxx.jpg'

# -----------------------------------------------
# Montar Google Drive
drive.mount('/content/gdrive')

# -----------------------------------------------
# Comprobación de archivos (imágenes)
content_train = os.listdir(RUTA_TRAIN)
content_val = os.listdir(RUTA_VAL)
content_test = os.listdir(RUTA_TEST)

print(len(content_train), 'train')
print(len(content_val), 'val')
print(len(content_test), 'test')

# Comprobación de archivos (etiquetas)
fichero1 = os.listdir(RUTA_TRAIN)
fichero2 = os.listdir(RUTA_VAL)
fichero3 = os.listdir(RUTA_TEST)

print(len(fichero1), 'train')
print(len(fichero2), 'val')
print(len(fichero3), 'test')

# -----------------------------------------------
# Crear carpeta para .yaml
os.makedirs('/content/data/', exist_ok=True)

# Crear archivo YAML
data_yaml_content = f"""
train: {RUTA_TRAIN}
val: {RUTA_VAL}
test: {RUTA_TEST}

nc: {len(CLASES)}
names: {CLASES}
"""

with open(YAML_PATH, "w") as f:
    f.write(data_yaml_content)

# Verificar contenido del YAML
!cat {YAML_PATH}

# -----------------------------------------------
# Entrenamiento del modelo YOLOv8
yolo_8 = YOLO(MODELO_YOLO)

results_8 = yolo_8.train(
    data=YAML_PATH,
    epochs=50,
    imgsz=640,
    lr0=0.0005,
    batch=32,
    lrf=0.1,
    augment=True,
    device="cuda",
)

# Validación del modelo entrenado
results = yolo_8.val()

# Métricas
map50 = results.box.map50
map50_95 = results.box.map
precision = results.box.mp
recall = results.box.mr
f1_score = results.box.f1

# -----------------------------------------------
# Visualización de predicciones aleatorias
all_images = glob.glob(f"{RUTA_VAL}/*.jpg")
test_images = random.sample(all_images, 6)

fig, axes = plt.subplots(2, 3, figsize=(15, 10))
for img_path, ax in zip(test_images, axes.flatten()):
    results = yolo_8(img_path)
    result_img = results[0].plot()
    img_rgb = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)
    ax.imshow(img_rgb)
    ax.axis("off")
    ax.set_title(os.path.basename(img_path))
plt.tight_layout()
plt.show()

# -----------------------------------------------
# Visualización de una imagen específica
results = yolo_8(IMG_PREDICCION)
result_img = results[0].plot()
img_rgb = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(6, 6))
plt.imshow(img_rgb)
plt.axis("off")
plt.title(os.path.basename(IMG_PREDICCION))
plt.show()

# -----------------------------------------------
# OCR sobre predicciones
image = cv2.imread(IMG_PREDICCION)

for result in results:
    for box in result.boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        cropped = image[y1:y2, x1:x2]
        gray = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)
        text = pytesseract.image_to_string(gray, config="--psm 6")
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, text.strip(), (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

print(text)
plt.figure(figsize=(10, 6))
plt.imshow(image_rgb)
plt.axis("off")
plt.title("OCR Results")
plt.show()

# -----------------------------------------------
# Guardar el modelo entrenado
yolo_8.save("/content/procesar_matriculas.pt")
